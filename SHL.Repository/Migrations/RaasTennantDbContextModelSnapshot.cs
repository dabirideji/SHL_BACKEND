// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SHL.Repository.Data.Context;

#nullable disable

namespace SHL.Repository.Migrations
{
    [DbContext(typeof(SHLTennantDbContext))]
    partial class SHLTennantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("EquityPlanRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "93be1e09-c686-4bb2-8e1b-8594f5585dd9",
                            ConcurrencyStamp = "32a5a6e8-0ade-45fb-a751-f469e975b66d",
                            Name = "Employer",
                            NormalizedName = "EMPLOYER"
                        },
                        new
                        {
                            Id = "acac7fb6-7c4a-4da8-a22e-47caab9928a9",
                            ConcurrencyStamp = "2fca74f5-8568-4b34-ac21-5b8a91de0372",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("EquityPlanRoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EquityPlanUserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("EquityPlanUserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EquityPlanUserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("EquityPlanUserToken", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.AppSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowIncentive")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEmployeeTransferShares")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExerciseRequestTaxValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ToggleOptionsEquityType")
                        .HasColumnType("bit");

                    b.Property<bool>("ToggleRsuEquityType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("ToggleSharePlan")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tbl_AppSetting", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("820fbf71-5e1a-4bcc-8a22-be82309e1311"),
                            AllowIncentive = false,
                            CanEmployeeTransferShares = false,
                            CreatedAt = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExerciseRequestTaxValue = 0m,
                            ToggleOptionsEquityType = false,
                            ToggleRsuEquityType = true,
                            ToggleSharePlan = false
                        });
                });

            modelBuilder.Entity("SHL.Domain.Models.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogEndpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogInitiator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogServerInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LogType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("SHL.Domain.Models.Broker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BrokerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tbl_Broker", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CompanyAvailableShareAmount")
                        .HasColumnType("float");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDomainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyInfrastructureConnectionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyInfrastructureStatus")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyInfrastructureType")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("CompanySettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CompanySharePriceValuation")
                        .HasColumnType("float");

                    b.Property<decimal>("CompanyTotalShareAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanySettingId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanyDatabaseConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DatabaseConnectionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DatabaseStatus")
                        .HasColumnType("int");

                    b.Property<int?>("DatabaseType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CompanyDatabaseConnections");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanyDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedDepartment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_CompanyDepartment", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanyInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CompanyCurrencyCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("NGN");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedDomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tbl_CompanyInfo", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanySetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanySettings");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanySubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompanySubscriptionBilledDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CompanySubscriptionCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompanySubscriptionExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompanySubscriptionNextBilledDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanySubscriptionRenewalType")
                        .HasColumnType("int");

                    b.Property<int?>("CompanySubscriptionStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanySubscriptionSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanySubscriptionCompanyId");

                    b.HasIndex("CompanySubscriptionSubscriptionId");

                    b.ToTable("CompanySubscriptions");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("ACTIVE");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("EquityPlanCompanyUser", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactAddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactAddressCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactAddressPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactAddressState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactAddressStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactAddressUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmployeeIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ContactHeldInTrust")
                        .HasColumnType("float");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("SHL.Domain.Models.ContractDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ContractDocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentContentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("EquityPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EquityPlanId");

                    b.ToTable("ContractDocument", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.Dividend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ClaimedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DividendValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmployeeEmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("EquityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EquityPlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("GenerateDividendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OfferValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TaxInPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnClaimedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenerateDividendId");

                    b.ToTable("tbl_Dividend", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.DividendPayoutRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeclineComment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("DividendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeEmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tbl_DividendPayoutRequest", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.DividendTransactionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DividendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeEmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DividendId");

                    b.ToTable("tbl_DividendTransactionHistory", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.EmploymentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeStartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeStaffId");

                    b.ToTable("EmploymentDetails");
                });

            modelBuilder.Entity("SHL.Domain.Models.EquityPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Allocated")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquityType")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentageAllocated")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PercentageTotalEquity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalEquity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnAllocated")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("EquityPlan", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.ExcerciseRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeclineReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ExercisePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HolderEmailAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Tax")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.ToTable("tbl_ExcerciseRequest", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.ExcerciseSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExcerciseSettingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExcerciseSettingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExerciseCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExcerciseSettings");
                });

            modelBuilder.Entity("SHL.Domain.Models.GenerateDividend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DividendPerShare")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("EquityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EquityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TaxInPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tbl_GenerateDividend", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.Grant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("GrantExercisePrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("GrantOptionPoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("GrantShareAmountAvailable")
                        .HasColumnType("float");

                    b.Property<double>("GrantShareAmountTotal")
                        .HasColumnType("float");

                    b.Property<double>("GrantShareAmountUnvested")
                        .HasColumnType("float");

                    b.Property<double>("GrantShareAmountVested")
                        .HasColumnType("float");

                    b.Property<int>("GrantStatus")
                        .HasColumnType("int");

                    b.Property<double>("GrantStrikePrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GrantOptionPoolId");

                    b.ToTable("Grants");
                });

            modelBuilder.Entity("SHL.Domain.Models.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvitationReceiverEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InvitationSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("InvitationStatus")
                        .HasColumnType("int");

                    b.Property<int?>("InvitationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("SHL.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NotificationAudience")
                        .HasColumnType("int");

                    b.Property<string>("NotificationBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationStatus")
                        .HasColumnType("int");

                    b.Property<string>("NotificationTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SHL.Domain.Models.NotificationActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NotificationActivityNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NotificationActivityNotificationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("NotificationActivityReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NotificationActivityReadStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NotificationActivityNotificationId");

                    b.ToTable("NotificationActivities");
                });

            modelBuilder.Entity("SHL.Domain.Models.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BalanceOfferValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquityHolderEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquityHolderUniqueId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquityPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("EquityPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimatedOfferValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Ownership in percentage");

                    b.Property<decimal>("EstimatedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExcercisePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("GrantDate")
                        .HasColumnType("datetime2")
                        .HasComment("date when record was added");

                    b.Property<bool>("IsOfferSigned")
                        .HasColumnType("bit");

                    b.Property<string>("OfferHolder")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Fullname of the offer owner");

                    b.Property<decimal>("OfferValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Ownership");

                    b.Property<string>("SignatureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SignedOfferUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("such as awaiting, vesting, vested. Awaiting means offer while vesting and vested means Portfolio");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VestEndDate")
                        .HasColumnType("datetime2")
                        .HasComment("date when vesting ends");

                    b.Property<DateTime>("VestStartDate")
                        .HasColumnType("datetime2")
                        .HasComment("date when vesting starts");

                    b.Property<double>("VestingPeriod")
                        .HasColumnType("float")
                        .HasComment("duration for vesting");

                    b.HasKey("Id");

                    b.HasIndex("EquityPlanId");

                    b.ToTable("Offer", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.OptionHolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("OptionHolderAmount")
                        .HasColumnType("float");

                    b.Property<double>("OptionHolderDilutedEquityPercentage")
                        .HasColumnType("float");

                    b.Property<string>("OptionHolderEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OptionHolderGrantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OptionHolderStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OptionHolderStatus")
                        .HasColumnType("int");

                    b.Property<int>("OptionHolderVestingStatus")
                        .HasColumnType("int");

                    b.Property<bool>("OptionHoldingIsSent")
                        .HasColumnType("bit");

                    b.Property<bool>("OptionHoldingIsSigned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OptionHolderGrantId");

                    b.HasIndex("OptionHolderStaffId");

                    b.ToTable("OptionHolders");
                });

            modelBuilder.Entity("SHL.Domain.Models.OptionHolderSignature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OptionHolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SignatureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SignatureFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OptionHolderId");

                    b.ToTable("OptionHolderSignatures");
                });

            modelBuilder.Entity("SHL.Domain.Models.OptionPool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OptionPoolApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("OptionPoolCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OptionPoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptionPoolStatus")
                        .HasColumnType("int");

                    b.Property<double>("OptionPoolTotalShares")
                        .HasColumnType("float");

                    b.Property<int>("OptionPoolType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OptionPoolCompanyId");

                    b.ToTable("OptionPools");
                });

            modelBuilder.Entity("SHL.Domain.Models.OptionPoolApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OptionPoolApprovalApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OptionPoolApprovalApprovalValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionPoolApprovalApproverEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OptionPoolOptionPoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OptionPoolOptionPoolId");

                    b.ToTable("OptionPoolApprovals");
                });

            modelBuilder.Entity("SHL.Domain.Models.PayoutAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayoutAccountAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PayoutAccountAccountType")
                        .HasColumnType("int");

                    b.Property<string>("PayoutAccountBankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayoutAccountIdentificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PayoutAccountIsVerified")
                        .HasColumnType("bit");

                    b.Property<int?>("PayoutAccountStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("PayoutAccountUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PayoutAccounts");
                });

            modelBuilder.Entity("SHL.Domain.Models.PoolDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OfferPoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OfferPoolId");

                    b.ToTable("PoolDocuments");
                });

            modelBuilder.Entity("SHL.Domain.Models.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DilutedOwnershipPercentage")
                        .HasColumnType("float");

                    b.Property<string>("EmployeeEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("TotalShareAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalShareUnits")
                        .HasColumnType("float");

                    b.Property<double?>("TotalShareValuation")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OptionId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("SHL.Domain.Models.SettingValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanySettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SettingValueDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingValueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanySettingId");

                    b.ToTable("SettingValue");
                });

            modelBuilder.Entity("SHL.Domain.Models.Shareholder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChnNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CscsNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Holding")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PercentageHolding")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShareHolderEmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShareholderAddress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ShareholderEmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShareholderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShareholderPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Shareholder", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChnNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CompanyId")
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CscsNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Designation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StaffCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StaffDepartment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StaffGrade")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StaffStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyUserId")
                        .IsUnique();

                    b.ToTable("tbl_Staff", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.StaffBank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BankName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SwitfCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("tbl_StaffBank", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubscriptionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SubscriptionPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SHL.Domain.Models.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SurveyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurveyMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("SHL.Domain.Models.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TokenExpiryDurationInMins")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TokenStatus")
                        .HasColumnType("int");

                    b.Property<string>("TokenTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TokenType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserReferenceValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("SHL.Domain.Models.TransactionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserUniqueId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("tbl_TransactionHistory", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.UploadedDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentFileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UploadedDocuments");
                });

            modelBuilder.Entity("SHL.Domain.Models.VestedShareTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChnNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CscsNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeclineComment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HolderEmailAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TransferValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.ToTable("tbl_VestedShareTransfer", (string)null);
                });

            modelBuilder.Entity("SHL.Domain.Models.VestingActivation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCliff")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OptionHolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VestingActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("VestingAmountInShares")
                        .HasColumnType("float");

                    b.Property<double>("VestingAmountInValuation")
                        .HasColumnType("float");

                    b.Property<double>("VestingDilutedPercentage")
                        .HasColumnType("float");

                    b.Property<double>("VestingOpeningPercentage")
                        .HasColumnType("float");

                    b.Property<double>("VestingRelativePercentage")
                        .HasColumnType("float");

                    b.Property<Guid?>("VestingScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VestingStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionHolderId");

                    b.HasIndex("VestingScheduleId");

                    b.ToTable("VestingActivations");
                });

            modelBuilder.Entity("SHL.Domain.Models.VestingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GrantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("VestAmountInUnit")
                        .HasColumnType("float");

                    b.Property<double?>("VestRelativePercentage")
                        .HasColumnType("float");

                    b.Property<double?>("VestSpecificAmount")
                        .HasColumnType("float");

                    b.Property<int?>("VestingAvailability")
                        .HasColumnType("int");

                    b.Property<int?>("VestingEveryPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("VestingEveryValue")
                        .HasColumnType("int");

                    b.Property<int?>("VestingForPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("VestingForValue")
                        .HasColumnType("int");

                    b.Property<int?>("VestingType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrantId");

                    b.ToTable("VestingSchedules");
                });

            modelBuilder.Entity("SHL.Domain.Models.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WalletAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WalletAvailableBalance")
                        .HasColumnType("float");

                    b.Property<double>("WalletCheckedBalance")
                        .HasColumnType("float");

                    b.Property<string>("WalletCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WalletStatus")
                        .HasColumnType("int");

                    b.Property<int?>("WalletType")
                        .HasColumnType("int");

                    b.Property<Guid>("WalletUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SHL.Domain.Models.CompanyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SHL.Domain.Models.CompanyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHL.Domain.Models.CompanyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SHL.Domain.Models.CompanyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SHL.Domain.Models.Company", b =>
                {
                    b.HasOne("SHL.Domain.Models.CompanySetting", "CompanySetting")
                        .WithMany()
                        .HasForeignKey("CompanySettingId");

                    b.Navigation("CompanySetting");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanyDepartment", b =>
                {
                    b.HasOne("SHL.Domain.Models.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanySetting", b =>
                {
                    b.HasOne("SHL.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanySubscription", b =>
                {
                    b.HasOne("SHL.Domain.Models.Company", "CompanySubscriptionCompany")
                        .WithMany("CompanySubscriptions")
                        .HasForeignKey("CompanySubscriptionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHL.Domain.Models.Subscription", "CompanySubscriptionSubscription")
                        .WithMany()
                        .HasForeignKey("CompanySubscriptionSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanySubscriptionCompany");

                    b.Navigation("CompanySubscriptionSubscription");
                });

            modelBuilder.Entity("SHL.Domain.Models.ContractDocument", b =>
                {
                    b.HasOne("SHL.Domain.Models.EquityPlan", "EquityPlan")
                        .WithMany("ContractDocuments")
                        .HasForeignKey("EquityPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquityPlan");
                });

            modelBuilder.Entity("SHL.Domain.Models.Dividend", b =>
                {
                    b.HasOne("SHL.Domain.Models.GenerateDividend", "GenerateDividend")
                        .WithMany("Dividends")
                        .HasForeignKey("GenerateDividendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenerateDividend");
                });

            modelBuilder.Entity("SHL.Domain.Models.DividendTransactionHistory", b =>
                {
                    b.HasOne("SHL.Domain.Models.Dividend", "Dividend")
                        .WithMany("DividendTransactionHistories")
                        .HasForeignKey("DividendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dividend");
                });

            modelBuilder.Entity("SHL.Domain.Models.EmploymentDetail", b =>
                {
                    b.HasOne("SHL.Domain.Models.Staff", "EmployeeStaffData")
                        .WithMany()
                        .HasForeignKey("EmployeeStaffId");

                    b.Navigation("EmployeeStaffData");
                });

            modelBuilder.Entity("SHL.Domain.Models.EquityPlan", b =>
                {
                    b.HasOne("SHL.Domain.Models.Company", "Company")
                        .WithMany("EquityPlans")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SHL.Domain.Models.ExcerciseRequest", b =>
                {
                    b.HasOne("SHL.Domain.Models.Offer", "Offer")
                        .WithMany("ExcerciseRequests")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("SHL.Domain.Models.Grant", b =>
                {
                    b.HasOne("SHL.Domain.Models.OptionPool", "GrantOptionPool")
                        .WithMany()
                        .HasForeignKey("GrantOptionPoolId");

                    b.Navigation("GrantOptionPool");
                });

            modelBuilder.Entity("SHL.Domain.Models.NotificationActivity", b =>
                {
                    b.HasOne("SHL.Domain.Models.Notification", "NotificationActivityNotification")
                        .WithMany()
                        .HasForeignKey("NotificationActivityNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationActivityNotification");
                });

            modelBuilder.Entity("SHL.Domain.Models.Offer", b =>
                {
                    b.HasOne("SHL.Domain.Models.EquityPlan", "EquityPlan")
                        .WithMany("Offers")
                        .HasForeignKey("EquityPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquityPlan");
                });

            modelBuilder.Entity("SHL.Domain.Models.OptionHolder", b =>
                {
                    b.HasOne("SHL.Domain.Models.Grant", "OptionHolderGrant")
                        .WithMany("TargetOptionHolders")
                        .HasForeignKey("OptionHolderGrantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHL.Domain.Models.Staff", "OptionHolderStaff")
                        .WithMany()
                        .HasForeignKey("OptionHolderStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionHolderGrant");

                    b.Navigation("OptionHolderStaff");
                });

            modelBuilder.Entity("SHL.Domain.Models.OptionHolderSignature", b =>
                {
                    b.HasOne("SHL.Domain.Models.OptionHolder", "OptionHolder")
                        .WithMany()
                        .HasForeignKey("OptionHolderId");

                    b.Navigation("OptionHolder");
                });

            modelBuilder.Entity("SHL.Domain.Models.OptionPool", b =>
                {
                    b.HasOne("SHL.Domain.Models.Company", "OptionPoolCompany")
                        .WithMany()
                        .HasForeignKey("OptionPoolCompanyId");

                    b.Navigation("OptionPoolCompany");
                });

            modelBuilder.Entity("SHL.Domain.Models.OptionPoolApproval", b =>
                {
                    b.HasOne("SHL.Domain.Models.OptionPool", "OptionPoolOptionPool")
                        .WithMany("OptionPoolApprovals")
                        .HasForeignKey("OptionPoolOptionPoolId");

                    b.Navigation("OptionPoolOptionPool");
                });

            modelBuilder.Entity("SHL.Domain.Models.PoolDocument", b =>
                {
                    b.HasOne("SHL.Domain.Models.OptionPool", "OfferPool")
                        .WithMany()
                        .HasForeignKey("OfferPoolId");

                    b.Navigation("OfferPool");
                });

            modelBuilder.Entity("SHL.Domain.Models.Portfolio", b =>
                {
                    b.HasOne("SHL.Domain.Models.Staff", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SHL.Domain.Models.Grant", "OptionGrant")
                        .WithMany()
                        .HasForeignKey("OptionId");

                    b.Navigation("Employee");

                    b.Navigation("OptionGrant");
                });

            modelBuilder.Entity("SHL.Domain.Models.SettingValue", b =>
                {
                    b.HasOne("SHL.Domain.Models.CompanySetting", null)
                        .WithMany("SettingsValues")
                        .HasForeignKey("CompanySettingId");
                });

            modelBuilder.Entity("SHL.Domain.Models.Shareholder", b =>
                {
                    b.HasOne("SHL.Domain.Models.Company", "Company")
                        .WithMany("Shareholders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SHL.Domain.Models.Staff", b =>
                {
                    b.HasOne("SHL.Domain.Models.Company", "Company")
                        .WithMany("Staffs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHL.Domain.Models.CompanyUser", "CompanyUser")
                        .WithOne("Staff")
                        .HasForeignKey("SHL.Domain.Models.Staff", "CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("SHL.Domain.Models.StaffBank", b =>
                {
                    b.HasOne("SHL.Domain.Models.Staff", "Staff")
                        .WithOne("Bank")
                        .HasForeignKey("SHL.Domain.Models.StaffBank", "StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SHL.Domain.Models.VestedShareTransfer", b =>
                {
                    b.HasOne("SHL.Domain.Models.Offer", "Offer")
                        .WithOne("VestedShareTransfer")
                        .HasForeignKey("SHL.Domain.Models.VestedShareTransfer", "OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("SHL.Domain.Models.VestingActivation", b =>
                {
                    b.HasOne("SHL.Domain.Models.OptionHolder", "OptionHolder")
                        .WithMany("VestingActvations")
                        .HasForeignKey("OptionHolderId");

                    b.HasOne("SHL.Domain.Models.VestingSchedule", "VestingSchedule")
                        .WithMany()
                        .HasForeignKey("VestingScheduleId");

                    b.Navigation("OptionHolder");

                    b.Navigation("VestingSchedule");
                });

            modelBuilder.Entity("SHL.Domain.Models.VestingSchedule", b =>
                {
                    b.HasOne("SHL.Domain.Models.Grant", "Grant")
                        .WithMany("GrantVestingSchedules")
                        .HasForeignKey("GrantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grant");
                });

            modelBuilder.Entity("SHL.Domain.Models.Company", b =>
                {
                    b.Navigation("CompanySubscriptions");

                    b.Navigation("Departments");

                    b.Navigation("EquityPlans");

                    b.Navigation("Shareholders");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanySetting", b =>
                {
                    b.Navigation("SettingsValues");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanyUser", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SHL.Domain.Models.Dividend", b =>
                {
                    b.Navigation("DividendTransactionHistories");
                });

            modelBuilder.Entity("SHL.Domain.Models.EquityPlan", b =>
                {
                    b.Navigation("ContractDocuments");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("SHL.Domain.Models.GenerateDividend", b =>
                {
                    b.Navigation("Dividends");
                });

            modelBuilder.Entity("SHL.Domain.Models.Grant", b =>
                {
                    b.Navigation("GrantVestingSchedules");

                    b.Navigation("TargetOptionHolders");
                });

            modelBuilder.Entity("SHL.Domain.Models.Offer", b =>
                {
                    b.Navigation("ExcerciseRequests");

                    b.Navigation("VestedShareTransfer");
                });

            modelBuilder.Entity("SHL.Domain.Models.OptionHolder", b =>
                {
                    b.Navigation("VestingActvations");
                });

            modelBuilder.Entity("SHL.Domain.Models.OptionPool", b =>
                {
                    b.Navigation("OptionPoolApprovals");
                });

            modelBuilder.Entity("SHL.Domain.Models.Staff", b =>
                {
                    b.Navigation("Bank")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
