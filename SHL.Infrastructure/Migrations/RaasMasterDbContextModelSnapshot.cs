// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SHL.Infrastructure.Data.Context;

#nullable disable

namespace SHL.Infrastructure.Migrations
{
    [DbContext(typeof(SHLMasterDbContext))]
    partial class SHLMasterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("SHL.Domain.Models.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogAction")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogBody")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogEndpoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogInitiator")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogPayload")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogResponse")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogServerInformation")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LogType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("SHL.Domain.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("TEXT");

                    b.Property<double?>("CompanyAvailableShareAmount")
                        .HasColumnType("REAL");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyCurrencyCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyDomainName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyInfrastructureConnectionString")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CompanyInfrastructureStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CompanyInfrastructureType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CompanySettingId")
                        .HasColumnType("TEXT");

                    b.Property<double>("CompanySharePriceValuation")
                        .HasColumnType("REAL");

                    b.Property<double?>("CompanyTotalShareAmount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanySettingId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanyDatabaseConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DatabaseConnectionString")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DatabaseStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DatabaseType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CompanyDatabaseConnections");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanySetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanySettings");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanySubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompanySubscriptionBilledDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanySubscriptionCompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompanySubscriptionExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompanySubscriptionNextBilledDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CompanySubscriptionRenewalType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CompanySubscriptionStatus")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CompanySubscriptionSubscriptionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanySubscriptionCompanyId");

                    b.HasIndex("CompanySubscriptionSubscriptionId");

                    b.ToTable("CompanySubscriptions");
                });

            modelBuilder.Entity("SHL.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NotificationAudience")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NotificationBody")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationMessage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NotificationStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NotificationTitle")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SHL.Domain.Models.NotificationActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NotificationActivityNotificationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NotificationActivityNotificationUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NotificationActivityReadAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NotificationActivityReadStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NotificationActivityNotificationId");

                    b.ToTable("NotificationActivities");
                });

            modelBuilder.Entity("SHL.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RoleStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SHL.Domain.Models.SettingValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CompanySettingId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingValueDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingValueName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanySettingId");

                    b.ToTable("SettingValue");
                });

            modelBuilder.Entity("SHL.Domain.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriptionCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriptionDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("TEXT");

                    b.Property<double>("SubscriptionPrice")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SHL.Domain.Models.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("TokenExpiryDurationInMins")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TokenStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TokenTitle")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TokenType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserReferenceValue")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("SHL.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPhoneNumberVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SHL.Domain.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserRoleRoleId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserRoleStatus")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserRoleUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleRoleId");

                    b.HasIndex("UserRoleUserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SHL.Domain.Models.Staff", b =>
                {
                    b.HasBaseType("SHL.Domain.Models.User");

                    b.Property<string>("StaffCode")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StaffCompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffDepartment")
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffGrade")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StaffStatus")
                        .HasColumnType("INTEGER");

                    b.HasIndex("StaffCompanyId");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("SHL.Domain.Models.Company", b =>
                {
                    b.HasOne("SHL.Domain.Models.CompanySetting", "CompanySetting")
                        .WithMany()
                        .HasForeignKey("CompanySettingId");

                    b.Navigation("CompanySetting");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanySetting", b =>
                {
                    b.HasOne("SHL.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanySubscription", b =>
                {
                    b.HasOne("SHL.Domain.Models.Company", "CompanySubscriptionCompany")
                        .WithMany("CompanySubscriptions")
                        .HasForeignKey("CompanySubscriptionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHL.Domain.Models.Subscription", "CompanySubscriptionSubscription")
                        .WithMany()
                        .HasForeignKey("CompanySubscriptionSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanySubscriptionCompany");

                    b.Navigation("CompanySubscriptionSubscription");
                });

            modelBuilder.Entity("SHL.Domain.Models.NotificationActivity", b =>
                {
                    b.HasOne("SHL.Domain.Models.Notification", "NotificationActivityNotification")
                        .WithMany()
                        .HasForeignKey("NotificationActivityNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationActivityNotification");
                });

            modelBuilder.Entity("SHL.Domain.Models.SettingValue", b =>
                {
                    b.HasOne("SHL.Domain.Models.CompanySetting", null)
                        .WithMany("SettingsValues")
                        .HasForeignKey("CompanySettingId");
                });

            modelBuilder.Entity("SHL.Domain.Models.UserRole", b =>
                {
                    b.HasOne("SHL.Domain.Models.Role", "UserRoleRole")
                        .WithMany()
                        .HasForeignKey("UserRoleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHL.Domain.Models.User", "UserRoleUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserRoleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRoleRole");

                    b.Navigation("UserRoleUser");
                });

            modelBuilder.Entity("SHL.Domain.Models.Staff", b =>
                {
                    b.HasOne("SHL.Domain.Models.Company", "StaffCompany")
                        .WithMany()
                        .HasForeignKey("StaffCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffCompany");
                });

            modelBuilder.Entity("SHL.Domain.Models.Company", b =>
                {
                    b.Navigation("CompanySubscriptions");
                });

            modelBuilder.Entity("SHL.Domain.Models.CompanySetting", b =>
                {
                    b.Navigation("SettingsValues");
                });

            modelBuilder.Entity("SHL.Domain.Models.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
